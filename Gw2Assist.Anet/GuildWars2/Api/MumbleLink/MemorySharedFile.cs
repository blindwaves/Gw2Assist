// <copyright company="GW2.NET Coding Team">
//   This product is licensed under the GNU General Public License version 2 (GPLv2). See the License in the project root folder or the following page: http://www.gnu.org/licenses/gpl-2.0.html
// </copyright>
// <summary>
//   Provides an implementation of the Mumble Link protocol.
//   https://github.com/Ruhrpottpatriot/GW2.NET/tree/1b1553ad07aab2ffe8ead285d7bc8ea64836a123/src/GW2NET.MumbleLink
// </summary>
using System;
using System.IO.MemoryMappedFiles;
using System.Runtime.InteropServices;

namespace Gw2Assist.Anet.GuildWars2.Api.MumbleLink
{
    public sealed class MemorySharedFile
    {
        private static volatile MemorySharedFile instance = null;
        private static object padLock = new object();

        private static readonly MemoryMappedFile MappedFile = MemoryMappedFile.CreateOrOpen("MumbleLink", Marshal.SizeOf(typeof(Interop.LinkedMem)));

        public static MemorySharedFile Instance
        {
            get
            {
                if (instance == null)
                {
                    lock (padLock)
                    {
                        // https://msdn.microsoft.com/en-us/library/ff650316.aspx
                        // This double-check locking approach solves the thread concurrency problems while
                        // avoiding an exclusive lock in every call to the Instance property method. 
                        if (instance == null) instance = new MemorySharedFile();
                    }
                }

                return instance;
            }
        }

        private MemorySharedFile() { }

        public Context Read()
        {
            using (var stream = MappedFile.CreateViewStream())
            {
                // Copy the shared memory block to a local buffer in managed memory.
                var buffer = new byte[stream.Length];
                stream.Read(buffer, 0, buffer.Length);

                // Pin the managed memory so that the GC doesn't move it.
                var handle = GCHandle.Alloc(buffer, GCHandleType.Pinned);

                // Get the address of the managed memory.
                var ptr = handle.AddrOfPinnedObject();

                Interop.LinkedMem linkedMem;

                try
                {
                    // Copy the managed memory to a managed struct/
                    linkedMem = (Interop.LinkedMem)Marshal.PtrToStructure(ptr, typeof(Interop.LinkedMem));
                }
                finally
                {
                    // Release the handle.
                    handle.Free();
                }

                // Ensure that data is available and that it was generated by Guild Wars 2.
                if (!linkedMem.name.Equals("Guild Wars 2", StringComparison.Ordinal))
                {
                    return null;
                }

                return new Context(linkedMem);
            }
        }
    }
}
